import os

configfile: "config.json"

#Tools
fastqc_path = "fastqc"
bbduksh_path = "bbduk.sh"
multiqc_path = "multiqc"
star_path = "STAR"
picard_path = "picard"
bamtools_path = "bamtools"

rule all:
    input:
        expand("{Mmusculus_dir}", Mmusculus_dir=config["Mmusculus_dir"]),
        expand(config["rawReads"] + "{sample}/{sample}_1.fq.gz", sample=config["sample_names"]),
        expand(config["rawReads"] + "{sample}/{sample}_2.fq.gz", sample=config["sample_names"]),
        expand(config["rawQC"] + "{sample}_1_fastqc.html", sample=config["sample_names"]),
        expand(config["rawQC"] + "{sample}_2_fastqc.html", sample=config["sample_names"]),
        #expand(config["multiQC_raw_report"]),
        expand(config["trimmedReads"] + "{sample}_trimmed_1.fq.gz", sample=config["sample_names"]),
        expand(config["trimmedReads"] + "{sample}_trimmed_2.fq.gz", sample=config["sample_names"]),
        expand(config["trimmedQC"] + "{sample}_trimmed_fq1_fastqc.html", sample=config["sample_names"]),
        expand(config["trimmedQC"] + "{sample}_trimmed_fq2_fastqc.html", sample=config["sample_names"]),
        #expand(config["multiQC_trimmed_report"]),
        expand(config["starAligned"] + "{sample}_STAR.bam", sample=config["sample_names"])	        		
        		


#---------------------
# Steps
#   1. RNAseq alignment. RNAseq reads are aligned via STAR two pass mode
#   2. index
#   3. sorting
#   4. marking duplicates
#   5. addig read groups
#   6. bam index
#

#---------------------
# Reference genome and annotation were downloaded prior to running snakemake. 
rule index_genome:
	input:
		fa = config["Mmusculus_fa"],
		gtf = config["Mmusculus_gtf"]
	output:
		index = directory(config["Mmusculus_dir"]),
	params:
		genome = config["Mmusculus_dir"]
	shell:
		"""
		STAR --runThreadN 8 --runMode genomeGenerate --genomeFastaFiles {input.fa} --sjdbGTFfile {input.gtf} --genomeDir {params.genome}
		"""
#---------------------
#rule fastqc on raw:
#---------------------
rule raw_fastqc:
	input:
		in_1 = (config["rawReads"]+"{sample}/{sample}_1.fq.gz"),
		in_2 = (config["rawReads"]+"{sample}/{sample}_2.fq.gz")
	output:
		R1_zip =  (config["rawQC"]+"{sample}_1_fastqc.zip"),
		R1_html = (config["rawQC"]+"{sample}_1_fastqc.html"),
		R2_zip =  (config["rawQC"]+"{sample}_2_fastqc.zip"),
		R2_html = (config["rawQC"]+"{sample}_2_fastqc.html")
	params:
		fastqc = fastqc_path,
		fastqc_dir = (config["rawQC"]),
		R1_prefix = (config["rawReads"]+"{sample}/{sample}_1"),
		R2_prefix = (config["rawReads"]+"{sample}/{sample}_2")
	shell:
		"""
		{params.fastqc} {input.in_1};
		{params.fastqc} {input.in_2};
		mv {params.R1_prefix}_fastqc.html {output.R1_html};
		mv {params.R1_prefix}_fastqc.zip {output.R1_zip};
		mv {params.R2_prefix}_fastqc.html {output.R2_html};
		mv {params.R2_prefix}_fastqc.zip {output.R2_zip}
		"""
# KEY
# Run fastqc analysis on read1 and then on read 2. Move the outputs (html and zip) into a new directory

#---------------------
#rule for generating MultiQC report for raw QC
#---------------------
rule multiqc_raw:
    input:
        raw_qc_reports = expand(config["rawQC"])
    output:
        report = (config[("multiQC_raw_report")]+"/multiqc_report.html")
    params:
        multiqc = multiqc_path
    shell:
        """
        {params.multiqc} {input.raw_qc_reports} --outdir {output.report}
        """

#---------------------
#rule trim fq:
#---------------------
rule trim_bbduk:
	input:
		in_1 = (config["rawReads"]+"{sample}/{sample}_1.fq.gz"),
		in_2 = (config["rawReads"]+"{sample}/{sample}_2.fq.gz")
	output:
		out_1 = (config["trimmedReads"]+"{sample}_trimmed_1.fq.gz"),
		out_2 = (config["trimmedReads"]+"{sample}_trimmed_2.fq.gz")
	params:
		bbduksh = bbduksh_path
	shell:
		"{params.bbduksh} in1={input.in_1} in2={input.in_2} "
		"out1={output.out_1} out2={output.out_2} "
		"ref=/research/labs/neurology/fryer/projects/references/RK20302_Illumina_adapters.fa "
		"ktrim=r k=23 mink=11 hdist=1 tpe tbo"
		
# KEY
# in1/in2 input paired end fastq files
# out1/out2 output paired end fastq files
# ref where adapter fasta is located
# ktrim=r is for right-trimming (3′ adapters), once a reference kmer is matched in a read, that kmer and all the bases to the right will be trimmed, leaving only the bases to the left
# ktrim=l is for left-trimming (5′ adapters)
# k=23 kmer length is 23-mers
# mink=11 will additionally look for shorter 11-mers at end of read
# hdist=1 with a small value of mink, it is useful to independently control the hamming/edit distance
# tpe specifies to trim both reads to the same length
# tbo specifies to also trim adapters based on pair overlap detection using BBMerge (which does not require known adapter sequences)
#---------------------
#rule fastqc on trimmed:
#---------------------
rule trim_fastqc:
	input:
		fq1_trim = (config["trimmedReads"]+"{sample}_trimmed_1.fq.gz"),
		fq2_trim = (config["trimmedReads"]+"{sample}_trimmed_2.fq.gz")
	output:
		fq1_zip =  (config["trimmedQC"]+"{sample}_trimmed_fq1_fastqc.zip"),
		fq1_html = (config["trimmedQC"]+"{sample}_trimmed_fq1_fastqc.html"),
		fq2_zip =  (config["trimmedQC"]+"{sample}_trimmed_fq2_fastqc.zip"),
		fq2_html = (config["trimmedQC"]+"{sample}_trimmed_fq2_fastqc.html")
	params:
		fastqc = fastqc_path,
		fastqc_dir = (config["trimmedQC"]),
		fq1_prefix = (config["trimmedReads"]+"{sample}_trimmed_1"),
		fq2_prefix = (config["trimmedReads"]+"{sample}_trimmed_2"),
	shell:
		"""
		{params.fastqc} {input.fq1_trim};
		{params.fastqc} {input.fq2_trim};
		mv {params.fq1_prefix}_fastqc.html {output.fq1_html};
		mv {params.fq1_prefix}_fastqc.zip {output.fq1_zip};
		mv {params.fq2_prefix}_fastqc.html {output.fq2_html};
		mv {params.fq2_prefix}_fastqc.zip {output.fq2_zip}
		"""

#---------------------
# rule for generating MultiQC report for trimmed QC
#---------------------
rule multiqc_trimmed:
    input:
        trimmed_qc_reports = expand(config["trimmedQC"])
    output:
        report = (config["multiQC_trimmed_report"]+"/multiqc_report.html")
    params:
        multiqc = multiqc_path
    shell:
        """
        {params.multiqc} {input.trimmed_qc_reports} --outdir {output.report}
        """
#---------------------
#rule star alignment: 
#---------------------

rule STAR_paired:
	input:
		fq1_trim = (config["trimmedReads"]+"{sample}_trimmed_1.fq.gz"),
		fq2_trim = (config["trimmedReads"]+"{sample}_trimmed_2.fq.gz")
	output:
		out_1 = (config["starAligned"]+"{sample}_STAR.bam")
	params:
		star = star_path,
		STAR_Index = (config["Mmusculus_dir"]),
		STAR_GTF = (config["Mmusculus_gtf"]),
	shell:
		"""
		{params.star} --runThreadN 8 --genomeDir {params.STAR_Index} --sjdbGTFfile {params.STAR_GTF} --twopassMode Basic --quantMode TranscriptomeSAM GeneCounts --readFilesCommand zcat --readFilesIn {input.fq1_trim} {input.fq2_trim} --outSAMtype BAM Unsorted --outFileNamePrefix {output.out_1};
		mv {output.out_1}Aligned.out.bam {output.out_1}
		"""

# KEY
#--runThreadN NumberOfThreads
#--genomeDir specifies where indices are located
#--sjdbGTFfile gene annotation file, used for splice aware junctions
#--twopassMode TAR will perform the 1st pass mapping, then it will automatically extract junctions, insert them into the genome index, and, finally, re-map all reads in the 2nd mapping pass.
#--readFilesCommand zcat for reading in compressed .gz files 
#--readFilesIn read in pair end trimmed fastq files
#--outSAMtype BAM Unsorted. Output will not be sorted by coordinate
#--quantMode TranscriptomeSAM GeneCounts to get the aligned transcripts an counts the number of reads per gene id
#--outFileNamePrefix. Naming prefix for the output bam file. 

# Output 
# SJ.out.tab contains high confidence collapsed splice junctions in tab-delimited format. Note that STAR defines the junction start/end as intronic bases, while many other software define them as exonic bases.

# quantMode GeneCounts
# column 1: gene ID
# column 2: counts for unstranded RNA-seq
# column 3: counts for the 1st read strand aligned with RNA (htseq-count option -s yes)
# column 4: counts for the 2nd read strand aligned with RNA (htseq-count option -s reverse)


# Note that STAR counts a paired-end read as one read, (unlike the samtools flagstat/idxstats, which count each mate separately). 
#--quantMode geneCounts, can be used to get gene counts 
#--genomeLoad LoadAndExit. Loads the star genome index into memory to be used by all star jobs. Will unload after script is done running. 
#--sjdbOverhang specifies the length of the genomic sequence around the annotated junction to be used in constructing the splice junctions database. Ideally, this length should be equal to the ReadLength-1, where ReadLength is the length of the reads.

